{
    "unit-test describe": {
        "prefix": "ss.unit-test.describe",
        "body": [
            "describe('description', () =>\r",
            "{\r",
            "    it('description', () =>\r",
            "    {\r",
            "        console.log('hello from mocha')\r",
            "    })\r",
            
            "})"
        ],
        "description": "Generates a decribe snippet in TypeScript unit test spec file"
    },
    "Launch_Debug_Mocha": {
        "prefix": "ss.mocha.launchSettings",
        "body": [
            "{\r",
            "    \"type\": \"node\",\r",
            "    \"request\": \"launch\",\r",
            "    \"name\": \"Mocha All\",\r",
            "    \"program\": \"${workspaceFolder}/node_modules/mocha/bin/_mocha\",\r",
            "    \"args\": [\r",
            "        \"-r\",\r",
            "        \"ts-node/register\",\r",
            "        \"--timeout\",\r",
            "        \"999999\",\r",
            "        \"--colors\",\r",
            "        \"${workspaceFolder}/modules/**/*-spec.ts\",\r",
            "    ],\r",
            "    \"console\": \"integratedTerminal\",\r",
            "    \"internalConsoleOptions\": \"neverOpen\",\r",
            "    \"protocol\": \"inspector\"\r",
            "}"
        ],
        "description": "A launch configuration that configure launching mocha test in debug mode"
    },
    "Terminal Mcq Prompt": {
        "prefix": "ss.terminal.mcq", // the snippet suggestion code editor show up for you.
        "body": [ // contains the code lines.
            "// npm install --save decova-terminal",
            "// import { CurrentTerminal as Terminal } from \"decova-terminal/CurrentTerminal\";",
            "let ops = { ${1:option1}: '${2:option1 text}'};",
            "let op = await Terminal.McqAsync('${0:question}', ops);",
            "switch(op)",
            "{",
            "\tcase ops.${1:option1}:",
            "\t\tconsole.log('ops.${1:option1}');",
            "\t\tbreak;",
            "}"
        ]
    },
    "VSCode create Quick Option Picker": {
        "prefix": "ss.vscode.QuickPicker",
        "body": [
            "const options = new List<QuickOption>(",
            "[",
            "{label: 'option1'},",
            "{label: 'option2'}",
            "]);",
            "new QuickPicker(options, (option: QuickOption)=>",
            "{",
            "return new Promise((resolve, reject)=>",
            "{",
            "switch(option.label)",
            "{",
            "case 'option1':",
            "window.showWarningMessage('This is from option1');",
            "tr.sendText('>>>>>> this is from option 1')",
            "break;",
            "case 'option2':",
            "tr.sendText('>>>>>> this is from option 2')",
            "break;",
            "}",
            "})",
            "});",
        ]
    }, 
    "ion-react-icons-import": {
        "prefix": "ion-react-icons-import",
        "body": [
            "import { calculatorOutline, refreshOutline } from \"ionicons/icons\";"
        ],
        "description": "Adding icons to elements with intellisence in the great ion-react"
    },
    "Create Singleton Circuit": {
        "prefix": "vol Singleton Circuit",
        "body": [
            "import { SingletonCircuit } from \"decova-voltage\";\r",
            "\r",
            "export class {1:CircuitName}Circuit extends SingletonCircuit\r",
            "{\r",
            "   {0}",
            "}\r",
            ""
        ],
        "description": "Generates a singleton circuit code snippet"
    },
    "Create Transient Circuit": {
        "prefix": "vol Transient Circuit",
        "body": [
            "import { TransientCircuit } from \"decova-voltage\";\r",
            "\r",
            "export class {1:CircuitName}Circuit extends TransientCircuit\r",
            "{\r",
            "   {0}",
            "}\r",
            ""
        ],
        "description": "Generates a Transient circuit code snippet"
    },
    "Create Entity Circuit": {
        "prefix": "vol Entity Circuit",
        "body": [
            "import { EntityCircuit } from \"decova-voltage\";\r",
            "\r",
            "export class {1:CircuitName}Circuit extends EntityCircuit\r",
            "{\r",
            "   {0}",
            "}\r",
            ""
        ],
        "description": "Generates an Entity circuit code snippet"
    },
    "voltage-page": {
        "prefix": "vol Page",
        "body": [
            "import { UIComponent, ${2:Singleton_or_Transient}Circuit } from 'decova-voltage';\r",
            "",
            "export default class ${1:PageName}Page extends UIComponent<${1:PageName}PageCircuit>\r",
            "{\r",
            "    protected RenderContent()\r",
            "    {\r",
            "        return '<h1>${1:PageName}</h1>';\r",
            "    }\r",
            "    \r",
            "}\r",
            "\r",
            "// move this to circuits folder\r",
            
            "export class ${1:PageName}PageCircuit extends ${2:Singleton_or_Transient}Circuit\r",
            "{\r\r",
            "   $0",
            "}\r",
            "\r",
            ""
        ],
        "description": "Generates a Page code along with its circuit"
    },
    "voltage-component": {
        "prefix": "vol Component",
        "body": [
            "import { UIComponent, ${2:Singleton_or_Transient}Circuit } from 'decova-voltage';\r",
            "",
            "export default class ${1:ComponentName} extends UIComponent<${1:ComponentName}Circuit>\r",
            "{\r",
            "    protected RenderContent()\r",
            "    {\r",
            "        return '<h1>${1:ComponentName}</h1>';\r",
            "    }\r",
            "    \r",
            "}\r",
            "\r",
            "// move this to circuits folder\r",
            
            "export class ${1:ComponentName}Circuit extends ${2:Singleton_or_Transient}Circuit\r",
            "{\r\r",
            "   $0",
            "}\r",
            "\r",
            ""
        ],
        "description": "Generates a UIComponent code along with its circuit"
    },
    "george docker-compose": {
        "prefix": "docker-compose-ssl",
        "body": [
            "# docker run --rm -it \r",
            "# -p 5500:80 -p 5555:443 \r",
            "# -e ASPNETCORE_URLS=\"https://+;http://+\" \r",
            "# -e ASPNETCORE_HTTPS_PORT=4001\r",
            "# -e ASPNETCORE_Kestrel__Certificates__Default__Password=\"trustGod();1\"\r",
            "# -e ASPNETCORE_Kestrel__Certificates__Default__Path=/https/WebApplication1.pfx \r",
            "# -v D:\\_certs:/https/ test-ssl-8\r",
            "\r",
            "version: '3'\r",
            "services:\r",
            "  ssl13: \r",
            "    build: \"G:\\\\Duty\\\\ArabFinance\\\\__NEW PRODUCTS\\\\EGID_Feeds\\\\POCs\\\\DeployToAzure\\\\WebApplication1\\\\WebApplication1\\\\bin\\\\Release\\\\net5.0\\\\publish\"\r",
            "    image: ssl13\r",
            "    ports:\r",
            "      - 5555:443\r",
            "      - 5500:80\r",
            "    environment:\r",
            "      - ASPNETCORE_URLS=\"https://+;http://+\"\r",
            "      - ASPNETCORE_HTTPS_PORT=\"5555\"\r",
            "      - ASPNETCORE_Kestrel__Certificates__Default__Password=trustGod();1\r",
            "      - ASPNETCORE_Kestrel__Certificates__Default__Path=/app/https/WebApplication1.pfx\r",
            "      # - ASPNETCORE_ENVIRONMENT=Development\r",
            ""
        ],
        "description": "A template for running a docker container with https installed"
    }
}